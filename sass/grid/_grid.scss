//
// Media Queries
//

$small-screen: 767px !default;
$medium-screen: 991px !default;
$large-screen: 1200px !default;
$xlarge-screen: 2560px !default;

$screen: "only screen" !default;
$small: "only screen and (max-width: #{$small-screen})" !default;
$medium: "only screen and (max-width:#{$medium-screen}) and (min-width: #{$small-screen})" !default;
$large: "only screen and (max-width:#{$large-screen})" !default;
$xlarge: "only screen and (min-width: #{$xlarge-screen})" !default;
$landscape: "only screen and (orientation: landscape)" !default;
$portrait: "only screen and (orientation: portrait)" !default;

//
// Grid Variables
//
$include-html-grid-classes: true;
$fixed-breakpoints: true;
$row-width: emCalc(1170);
$column-gutter: emCalc(30);
$total-columns: 12;

/* Foundation Visibility HTML Classes */
  .show-for-small,
  .show-for-medium,
  .show-for-medium-down { display: none !important; }

  .show-for-large,
  .show-for-xlarge,
  .show-for-large-down,
  .show-for-xlarge-down,
  .show-for-medium-up { display: inherit !important; }

  .hide-for-small,
  .hide-for-medium,
  .hide-for-medium-down { display: inherit !important; }

  .hide-for-large,
  .hide-for-xlarge,
  .hide-for-medium-up { display: none !important; }

  /* Small Displays: 640px - 1024px */
  @media #{$small} {
    .show-for-small,
    .show-for-medium-down { display: inherit !important; }

    .show-for-medium,
    .show-for-large,
    .show-for-medium-up { display: none !important; }

    .hide-for-small,
    .hide-for-medium-down  { display: none !important; }

    .hide-for-medium,
    .hide-for-large,
    .hide-for-medium-up { display: inherit !important; }
  }

  /* Medium Displays: 1024px - 1440px */
  @media #{$medium} {
    .show-for-medium,
    .show-for-medium-down,
    .show-for-medium-up,
    .show-for-large-up { display: inherit !important; }

    .show-for-large,
    .show-for-small
    .show-for-xlarge { display: none !important; }

    .hide-for-large,
    .hide-for-small { display: inherit !important; }

    .hide-for-medium,
    .hide-for-medium-up,
    .hide-for-medium-down { display: none !important; }
  }

  @media #{$xlarge} {
    .show-for-medium { display: inherit !important; }
  }

//
// Grid Calc Function
//
@function gridCalc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

// Right and Left "auto" for grid
%right-auto { #{$opposite-direction}: auto; }
%left-auto { #{$default-float}: auto; }

//
// Grid Mixins
//

$experimental: true !default;

// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type:border-box) {
  @if $experimental {
    -moz-box-sizing: $type;
    -webkit-box-sizing: $type;
  }
  box-sizing: $type;
}

// We use this to do clear floats
@mixin clearfix() {
  *zoom:1;
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

// Create default, nested, and collapsed rows
@mixin grid-row($behavior: false) {

  // use @include grid-row(nest); to include a nested row
  @if $behavior == nest {
    margin-#{$default-float}: -($column-gutter/2);
    margin-#{$opposite-direction}: -($column-gutter/2);
    max-width: none;
    width: auto;
  }

  // use @include grid-row(collapse); to collapsed a container row margins
  @else if $behavior == collapse {
    margin-#{$default-float}: 0;
    margin-#{$opposite-direction}: 0;
    max-width: $row-width;
    width: 100%;
  }

  // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
  @else if $behavior == nest-collapse {
    margin-#{$default-float}: 0;
    margin-#{$opposite-direction}: 0;
    max-width: none;
    width: auto;
  }

  // use @include grid-row; to use a container row
  @else {
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $row-width;
    width: 100%;
  }

  @include clearfix;
}


// For creating columns - @include these inside a media query to control small vs. large grid layouts
@mixin grid-column($columns:false, $last-column:false, $center:false, $offset:false, $push:false, $pull:false, $collapse:false, $float:true, $include-position-relative: false) {

  // If collapsed, get rid of gutter padding
  @if $collapse {
    padding-left: 0;
    padding-right: 0;
  }

  // Gutter padding whenever a column isn't set to collapse
  // (use $collapse:null to do nothing)
  @else if $collapse == false {
    padding-left: $column-gutter / 2;
    padding-right: $column-gutter / 2;
  }

  // If a column number is given, calculate width
  @if $columns {
    width: gridCalc($columns, $total-columns);

    // If last column, float naturally instead of to the right
    @if $last-column { float: $opposite-direction; }
  }

  // If offset, calculate appropriate margins
  @if $offset { margin-#{$default-float}: gridCalc($offset, $total-columns); }

  // Source Ordering, adds left/right depending on which you use.
  @if $push { #{$default-float}: gridCalc($push, $total-columns); #{$opposite-direction}: auto; }
  @if $pull { #{$opposite-direction}: gridCalc($pull, $total-columns); #{$default-float}: auto; }

  // If centered, get rid of float and add appropriate margins
  @if $center {
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    float: none !important;
  }

  @if $float {
    @if $float == left or $float == true { float: $default-float; }
    @else if $float == right { float: $opposite-direction; }
    @else { float: none; }
  }

  // This helps us not need to repeat "position:relative" everywehere
  @if $include-position-relative { position: relative; }
}


@if $include-html-grid-classes != false {
  /* Grid HTML Classes */
  .row {
    @include grid-row;

    &.no-margin {
      .column,
      .columns { @include grid-column($collapse:true); }
    }

    .row { @include grid-row($behavior:nest);
      &.no-margin { @include grid-row($behavior:nest-collapse); }
    }
  }

  .column,
  .columns { @include grid-column($columns:$total-columns, $include-position-relative: true); }

  

    @for $i from 1 through $total-columns {
      .large#{-$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
    }

    @for $i from 0 through $total-columns - 1 {
      .large-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
    }

    @for $i from 1 through $total-columns - 1 {
      .large-push#{-$i} { @include grid-column($push:$i, $collapse:null, $float:false); }
      .large-pull#{-$i} { @include grid-column($pull:$i, $collapse:null, $float:false); }
    }

    .column.large-centered,
    .columns.large-centered { @include grid-column($center:true, $collapse:null, $float:false); }

    .column.large-uncentered,
    .columns.large-uncentered {
      margin-#{$default-float}: 0;
      margin-#{$opposite-direction}: 0;
      float: $default-float !important;
    }

  @media #{$medium}{

    @for $i from 1 through $total-columns {
      .medium#{-$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
    }

    @for $i from 0 through $total-columns - 1 {
      .medium-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
    }

    @for $i from 1 through $total-columns - 1 {
      .medium-push#{-$i} { @include grid-column($push:$i, $collapse:null, $float:false); }
      .medium-pull#{-$i} { @include grid-column($pull:$i, $collapse:null, $float:false); }
    }

    .column.medium-centered,
    .columns.medium-centered { @include grid-column($center:true, $collapse:null, $float:false); }

    .column.medium-uncentered,
    .columns.medium-uncentered {
      margin-#{$default-float}: 0;
      margin-#{$opposite-direction}: 0;
      float: $default-float !important;
    }

  }

  @media #{$xlarge}{

    @for $i from 1 through $total-columns {
      .xlarge#{-$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
    }

    @for $i from 0 through $total-columns - 1 {
      .xlarge-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
    }

    @for $i from 1 through $total-columns - 1 {
      .xlarge-push#{-$i} { @include grid-column($push:$i, $collapse:null, $float:false); }
      .xlarge-pull#{-$i} { @include grid-column($pull:$i, $collapse:null, $float:false); }
    }

    .column.xlarge-centered,
    .columns.xlarge-centered { @include grid-column($center:true, $collapse:null, $float:false); }

    .column.xlarge-uncentered,
    .columns.xlarge-uncentered {
      margin-#{$default-float}: 0;
      margin-#{$opposite-direction}: 0;
      float: $default-float !important;
    }

  }

   @media #{$small}{

    @for $i from 1 through $total-columns {
      .small#{-$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
    }

    @for $i from 0 through $total-columns - 1 {
      .small-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
    }

    @for $i from 1 through $total-columns - 1 {
      .small-push#{-$i} { @include grid-column($push:$i, $collapse:null, $float:false); }
      .small-pull#{-$i} { @include grid-column($pull:$i, $collapse:null, $float:false); }
    }

    .column.small-centered,
    .columns.small-centered { @include grid-column($center:true, $collapse:null, $float:false); }

    .column.small-uncentered,
    .columns.small-uncentered {
      margin-#{$default-float}: 0;
      margin-#{$opposite-direction}: 0;
      float: $default-float !important;
    }

    @for $i from 1 through $total-columns - 1 {
      .large-push#{-$i} { right: 0; }
      .large-pull#{-$i} { right: 0; }
    }

  }

}

@if $fixed-breakpoints == true {
// Fixed breakpoints
  // Extra small
    @media only screen and (max-width: 768px) {
    
    }

  //Small devices
    @media only screen and (min-width: 769px) and (max-width: 991px){
      .row {
        width: emCalc(750);
      }
    }

  //Medium Desktop
    @media only screen and (min-width: 992px) and (max-width: 1199px){
      .row {
        width: emCalc(970);
      }
    }

  //Large Desktop
    @media only screen and (min-width: 1200px) {
      .row {
        width: emCalc(1170);
      }
    }
}


//
// Block Grid Variables
//
$include-html-grid-classes: $include-html-classes !default;

// We use this to control the maximum number of block grid elements per row
$block-grid-elements: 12 !default;
$block-grid-default-spacing: $column-gutter; //emCalc(20) !default;

// Enables media queries for block-grid classes. Set to false if writing semantic HTML.
$block-grid-media-queries: true !default;

//
// Block Grid Mixins
//

// We use this mixin to create different block-grids. You can apply per-row and spacing options.
// Setting $base-style to false will ommit default styles.
@mixin block-grid($per-row:false, $spacing:$block-grid-default-spacing, $base-style:true) {

  @if $base-style {
    display: block;
    padding: 0;
    margin: 0 (-$spacing/2);
    overflow-x: visible;
    @include clearfix;

    &>li {
      display: inline;
      height: auto;
      position: relative;
      float: $default-float;
      padding: 0 ($spacing/2) $spacing;
    }
  }

  @if $per-row {
    &>li {
      width: 100%/$per-row;
      padding: 0 ($spacing/2) $spacing;

      &:nth-of-type(n) { clear: none; }
      &:nth-of-type(#{$per-row}n+1) { clear: both; }
    }
  }

}

@if $include-html-grid-classes {
  /* Foundation Block Grids for below small breakpoint */
  @media only screen {
    [class*="block-grid-"] { @include block-grid; }

    @for $i from 1 through $block-grid-elements {
      .large-block-grid-#{($i)} {
        @include block-grid($i,$block-grid-default-spacing,false);
      }
    }
  }
  
  /* Foundation Block Grids for below large breakpoint */
  @media #{$medium} {
    /* Remove small grid clearing */
    @for $i from 1 through $block-grid-elements {
      .large-block-grid-#{($i)} > li:nth-of-type(#{$i}n+1) { clear: none; }
    }
  
    @for $i from 1 through $block-grid-elements {
      .medium-block-grid-#{($i)} {
        @include block-grid($i,$block-grid-default-spacing,false);
      }
    }
  }

  /* Foundation Block Grids for below medium breakpoint */
  @media #{$small} {
    /* Remove small grid clearing */
    @for $i from 1 through $block-grid-elements {
      .large-block-grid-#{($i)} > li:nth-of-type(#{$i}n+1) { clear: none; }
    }
  
    @for $i from 1 through $block-grid-elements {
      .small-block-grid-#{($i)} {
        @include block-grid($i,$block-grid-default-spacing,false);
      }
    }
  }
}
